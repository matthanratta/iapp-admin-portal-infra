---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: This template provides an API for managing the application web services
Parameters:
  pOrganization:
    Description: The name of the portfolio that identifies its products, applications, and components
    Type: String
    MinLength: 1
    MaxLength: 30
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.organization }}
  pPortfolio:
    Description: The name of the portfolio that identifies its products, applications, and components
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.portfolio }}
  pProduct:
    Description: The name of the product that identifies its applications and components
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.product }}
  pApplication:
    Description: The name of the application (or service module) that identifies its components
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.application }}
  pComponent:
    Description: The name of the component that aligns with the application or service module
    Type: String
    MinLength: 0
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.component }}
  pDepartment:
    Description: The name of the department that owns the resource
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.catalog.department }}
  pEnvironment:
    Description: 'The name of the environment in which the resource is running (e.g.: sandbox, development, test, production)'
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '[a-zA-Z0-9\-]*'
    Default: ${{ iapp.aws.environment }}
  pSupportEmail:
    Description: The email address of the support team to contact
    Type: String
    MinLength: 8
    MaxLength: 30
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    Default: ${{ iapp.catalog.support_email }}
  pReleaseTag:
    Description: 'The name of the release to pull the code from'
    Type: String
    MinLength: 1
    MaxLength: 80    
    Default: ${{ iapp.pipeline.release_vrs }}
  pArtifactRepoName:
    Description: 'The name of the artifacvt repository (S3 Bucket) where the artifact is stored.'
    Type: String 
    Default: iapp-artifacts-repository
  pArtifactName:
    Description: 'The name of the artifact that is the source code for the functions, (e.g.: admin-portal_serverless.zip)'
    Type: String
    MinLength: 1
    MaxLength: 80
    Default: 'admin-portal_serverless.zip'
  pDomainName:
    Description: 'The domain name to use for the API service. This is optional adn can be left empty.'
    Type: String
    Default: ${{ iapp.aws.domain }}
  pCertificateArn:
    Description: The AWS arn for the certificate used by the API 
    Type: String
    Default: ${{ iapp.aws.certarn }}
  pSourceCodeURL:
    Description: The location where the source code resides
    Type: String 
    Default: ${{ iapp.code.sourcecode_url }}
  pStageName:
    Description: 'The name od the API gateway stage where the deployments posted, (default = latest)'
    Type: String 
    Default: 'latest'
  pUserPoolArn:
    Description: 'The AWS arn of the Cognito User Pool to use for authorization to the API' 
    Type: String 
    Default: 'arn:aws:cognito-idp:us-east-1:932197367731:userpool/us-east-1_xnWubxCLi'  
  pAllowHeaders:
    Description: 'The value for the Access-Control-Allow-Headers response header' 
    Type: String 
    Default: 'Content-Type,Authorization,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods,Origin,x-api-key' 
  pAllowOrigin:
    Description: 'The value for the Access-Control-Allow-Origin response header, (default = https://iapp.org)' 
    Type: String 
    Default: '*' 
  pExternalEndpoint:
    Description: 'Indicates if the API Gateway endpoints is external facing, (true or false)' 
    Type: String 
    AllowedValues:
      - 'true'
      - 'false' 
    Default: 'true' 
Mappings: 
  LkpReleaseLvl: 
    sandbox: 
      ReleaseLvl: 'pre-alpha'
    development: 
      ReleaseLvl: 'alpha'
    test: 
      ReleaseLvl: 'beta'
    uat: 
      ReleaseLvl: 'release-candidate'
    production: 
      ReleaseLvl: 'general-release'
Conditions:
  HasCustomDomainName:
    Fn::Not:
      - Fn::Equals:
        - ''
        - Ref: pDomainName
  IsExternalEndpoint:
    Fn::Equals:
      - Ref: pExternalEndpoint
      - 'true'
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs10.x
    Timeout: 30
    MemorySize: 128
Resources:  
  # database
  rDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        !Sub "${pOrganization}-${pApplication}-${pEnvironment}-portal"      
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: _id
        AttributeType: S
      - AttributeName: field1
        AttributeType: S
      - AttributeName: field2
        AttributeType: N
      - AttributeName: field3
        AttributeType: B
      KeySchema:
      - AttributeName: _id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: idx_field1
        KeySchema:
        - AttributeName: field1
          KeyType: HASH
        Projection:
          ProjectionType: ALL 
      - IndexName: idx_field2
        KeySchema:
        - AttributeName: field2
          KeyType: HASH
        Projection:
          ProjectionType: ALL   
      - IndexName: idx_field3
        KeySchema:
        - AttributeName: field3
          KeyType: HASH
        Projection:
          ProjectionType: ALL   
      SSESpecification:
        SSEEnabled: True
      Tags: 
        - 
          Key: "Name"
          Value:
            !Sub "${pOrganization}-${pApplication}-${pEnvironment}-portal"
        - 
          Key: "iapp-organization"
          Value: 
            !Ref pOrganization
        - 
          Key: "iapp-portfolio"
          Value: 
            !Ref pPortfolio
        - 
          Key: "iapp-product"
          Value: 
            !Ref pProduct
        - 
          Key: "iapp-application"
          Value: 
            !Ref pApplication
        - 
          Key: "iapp-component"
          Value:
            !Ref pComponent
        - 
          Key: "iapp-department"
          Value:
            !Ref pDepartment
        - 
          Key: "iapp-environment"
          Value:
            !Ref pEnvironment
        - 
          Key: "iapp-support-email"
          Value:
            !Ref pSupportEmail 
  # API 
  rRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        !Sub "${pOrganization}-${pApplication}-${pEnvironment}-api"
      Description: 
        !Sub "API for ${pApplication} for version ${pReleaseTag}"  
      StageName: 
        !Ref pStageName
      #Domain:
      #  Fn::If: 
      #  - HasCustomDomainName
      #  -
      #    DomainName:
      #      !Sub "${pDomainName}-${pEnvironment}"
      #    BasePath: 
      #      - /hello
      #    CertificateArn: 
      #      !Ref pCertificateArn
      #  - !Ref AWS::NoValue
      Auth:
        # Important! Set this to false to support CORS, 
        # but make sure to enable APIKeyRequired in the 
        # Lambda Resources under the Events property
        ApiKeyRequired: false
        Authorizers: 
          AppCognitoAuthorizer:
            UserPoolArn:
              Ref: pUserPoolArn
        DefaultAuthorizer: AppCognitoAuthorizer
        # Important! Add this line, or you'll have a bad time. 
        # The CORS preflight OPTIONS request will fail. 
        AddDefaultAuthorizerToCorsPreflight: false
        ResourcePolicy:
          CustomStatements: [
            {
              "Sid": "Cross Account Roles Access",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": [
                  "execute-api:/latest/*/*"
              ],
              "Condition": {
                "StringLike": {
                    "aws:SourceArn": [
                      "arn:aws:iam::759021155229:role/${*}",
                      "arn:aws:iam::118141163352:role/${*}",
                      "arn:aws:iam::829225102042:role/${*}",
                      "arn:aws:iam::237529788575:role/${*}",
                      "arn:aws:iam::620738768371:role/${*}",
                      "arn:aws:iam::759021155229:role/${*}",
                      "arn:aws:iam::969496774796:role/${*}",
                      "arn:aws:iam::845665128728:role/${*}"
                    ]
                }
              }
            },
            {
              "Sid": "VPN Access",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": [
                  "execute-api:/latest/*/*"
              ],
              "Condition": {
                "IpAddress": {
                    "aws:SourceIp": [
                      "66.211.133.188/32",
                      "18.232.223.115/32"
                    ]
                }
              }
            }
          ]        
        UsagePlan:
          UsagePlanName: 
            !Sub "Normal Usage Plan for ${pApplication}"
          Description: 
            !Sub "Plan that represents the expected usage of the ${pApplication} API"
          CreateUsagePlan: PER_API
          # The maximum number of permitted requests per day is 86400 (1 request per second)
          # Change this setting to control AWS costs and prevent costly DDOS attacks
          Quota:
            Limit: 86400
            Offset: 0
            Period: DAY
          Throttle:
            BurstLimit: 10
            RateLimit: 10
          Tags:
            - 
              Key: "Name"
              Value:
                !Sub "${pOrganization}-${pApplication}-${pEnvironment}-api-usageplan"
            - 
              Key: "iapp-organization"
              Value: 
                !Ref pOrganization
            - 
              Key: "iapp-portfolio"
              Value: 
                !Ref pPortfolio
            - 
              Key: "iapp-product"
              Value: 
                !Ref pProduct
            - 
              Key: "iapp-application"
              Value: 
                !Ref pApplication
            - 
              Key: "iapp-component"
              Value:
                !Ref pComponent
            - 
              Key: "iapp-department"
              Value:
                !Ref pDepartment
            - 
              Key: "iapp-environment"
              Value:
                !Ref pEnvironment
            - 
              Key: "iapp-support-email"
              Value:
                !Ref pSupportEmail 
      Cors:
        #AllowCredentials: true
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowOrigin:
          Fn::Sub: "'${pAllowOrigin}'"
        AllowHeaders: 
          Fn::Sub: "'${pAllowHeaders}'"
        MaxAge: '''3600'''
      AccessLogSetting: 
       DestinationArn: 
         !GetAtt rAPILogGrpApi.Arn
       Format: >-
         {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
         "caller":"$context.identity.caller",
         "user":"$context.identity.user","requestTime":"$context.requestTime",
         "eventType":"$context.eventType","routeKey":"$context.routeKey",
         "status":"$context.status","connectionId":"$context.connectionId"}          
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin:
                Fn::Sub: "'${pAllowOrigin}'"
              Access-Control-Allow-Headers:
                Fn::Sub: "'${pAllowHeaders}'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin:
                Fn::Sub: "'${pAllowOrigin}'"
              Access-Control-Allow-Headers:
                Fn::Sub: "'${pAllowHeaders}'"
        MISSING_AUTHENTICATION_TOKEN:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin:
                Fn::Sub: "'${pAllowOrigin}'"
              Access-Control-Allow-Headers:
                Fn::Sub: "'${pAllowHeaders}'"
          StatusCode: "401"
          ResponseTemplates:
            application/json: '{"message": "missing token" }'
        EXPIRED_TOKEN:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin:
                Fn::Sub: "'${pAllowOrigin}'"
              Access-Control-Allow-Headers: 
                Fn::Sub: "'${pAllowHeaders}'"
          StatusCode: "401"
          ResponseTemplates:
            application/json: '{"message": "expired token" }'
        INVALID_API_KEY:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin:
                Fn::Sub: "'${pAllowOrigin}'"
              Access-Control-Allow-Headers:
                Fn::Sub: "'${pAllowHeaders}'"
          StatusCode: "456"
          ResponseTemplates:
            application/json: '{"message": "invalid api key" }'
    Models:
        Error:
          type: object
          properties:
            message:
              type: string
    Tags: 
      - 
        Key: "Name"
        Value:
          !Sub "${pOrganization}-${pApplication}-${pEnvironment}-api"
      - 
        Key: "iapp-organization"
        Value: 
          !Ref pOrganization
      - 
        Key: "iapp-portfolio"
        Value: 
          !Ref pPortfolio
      - 
        Key: "iapp-product"
        Value: 
          !Ref pProduct
      - 
        Key: "iapp-application"
        Value: 
          !Ref pApplication
      - 
        Key: "iapp-component"
        Value:
          !Ref pComponent
      - 
        Key: "iapp-department"
        Value:
          !Ref pDepartment
      - 
        Key: "iapp-environment"
        Value:
          !Ref pEnvironment
      - 
        Key: "iapp-support-email"
        Value:
          !Ref pSupportEmail   
  # WAF
  rWAF:
    Type: AWS::CloudFormation::CustomResource
    Condition: IsExternalEndpoint
    Properties:
      ServiceToken: !ImportValue shared:guardrails:waf-lookup:arn
  rRestAPIWaf:
    DependsOn:
      - rRestApi
      - rWAF
    Type: AWS::WAFv2::WebACLAssociation
    Condition: IsExternalEndpoint
    Properties: 
      ResourceArn:
        Fn::Sub: 
          - arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiId}/stages/latest
          - { ApiId: !Ref rRestApi }
      WebACLArn: 
        !GetAtt rWAF.ARN
  # Roles
  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub "${pOrganization}-${pApplication}-${pEnvironment}-api"
      Description: 
        !Sub "The role for calling the lambda functions for the ${pApplication} application"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  rLambdaProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
      - rLambdaRole
    Properties:
      Path: /
      Roles:
      - !Ref rLambdaRole  
  rLambdaRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - rLambdaRole
      - rLambdaProfile
    Properties:
      PolicyName: 
        !Sub "${pOrganization}-${pApplication}-${pEnvironment}-api"
      Roles:
        - !Ref rLambdaRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Sid: "CrossAccountRolePassing"
            Effect: "Allow"
            Action:
              - sts:AssumeRole
              - iam:GetRole
              - iam:PassRole
            Resource:
              - "*"
          - 
            Sid: "Logging"
            Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - "*"
          - 
            Sid: "DatabasePermissions"
            Effect: "Allow"
            Action:
              - dynamodb:*
            Resource: 
              - !GetAtt rDBTable.Arn 
              - Fn::Sub: 
                - "${DBArn}/*"
                - { DBArn: !GetAtt rDBTable.Arn } 
  # Functions
  rGetLambda:
    DependsOn:
      - rLambdaRole
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.indexGet
      Timeout: 300
      Role: 
        !GetAtt rLambdaRole.Arn
      CodeUri: 
        Bucket:
          !Ref pArtifactRepoName
        Key:
          Fn::Sub:
            - "releases/${pReleaseTag}/${RelLvl}/${pArtifactName}"
            - RelLvl:
                !FindInMap
                  - LkpReleaseLvl
                  - !Ref pEnvironment
                  - ReleaseLvl
      Environment:
        Variables:
          DOMAIN: 
            Ref: pDomainName
          DB_TABLE_NAME:
            Ref: rDBTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: rRestApi
  rPostLambda:
    DependsOn:
      - rLambdaRole
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.indexUpsert
      Timeout: 300
      Role: 
        !GetAtt rLambdaRole.Arn
      CodeUri: 
        Bucket:
          !Ref pArtifactRepoName
        Key:
          Fn::Sub:
            - "releases/${pReleaseTag}/${RelLvl}/${pArtifactName}"
            - RelLvl:
                !FindInMap
                  - LkpReleaseLvl
                  - !Ref pEnvironment
                  - ReleaseLvl
      Environment:
        Variables:
          ENV_VAR: "Hello there"
          DOMAIN: 
            Ref: pDomainName
          DB_TABLE_NAME:
            Ref: rDBTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /{name}
            Method: POST
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: rRestApi              
  # Logging
  rAPILogGrpApi:
    DependsOn:
      - rRestApi
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: 
        !Join 
          - ""
          - - "/aws/lambda/"
            - !Ref rRestApi
      RetentionInDays: 30  
  rAPILogGrpGet:
    DependsOn:
      - rGetLambda
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: 
        !Join 
          - ""
          - - "/aws/lambda/"
            - !Ref rGetLambda
      RetentionInDays: 30
  rAPILogGrpPost:
    DependsOn:
      - rPostLambda
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: 
        !Join 
          - ""
          - - "/aws/lambda/"
            - !Ref rPostLambda
      RetentionInDays: 30      
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value: 
      Fn::If: 
        - HasCustomDomainName
        - Fn::Sub: https://${pDomainName}-${pEnvironment}.execute-api.${AWS::Region}.amazonaws.com/${pStageName}/
        - Fn::Sub: https://${rRestApi}.execute-api.${AWS::Region}.amazonaws.com/${pStageName}/
  ApiKey:
    Description: The API key resource ID that contains the api key value used to access the services
    Value:
      !Ref rRestApi.ApiKey
  SourceCode:
    Description: The location of the source code for this CFT
    Value: !Ref pSourceCodeURL 